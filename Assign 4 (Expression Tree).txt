#include <iostream>
#include <string>
#include <stack>
using namespace std;

struct node{
    char val;
    node* left;
    node* right;

    node(char data): val(data), left(NULL),right(NULL) {}


};

node* insert(string s,int& curr){
    if(curr == s.size()){
        return NULL;
    }
    node* root = new node(s[curr]);
    
    if(s[curr]== '+' || s[curr]== '-' || s[curr]== '*' || s[curr]== '/' ){
        curr++;
        root->left = insert(s,curr);
        curr++;
        root->right = insert(s,curr);

    }
    return root;
}



void prewr(node* root){
    if(root==nullptr){
        return;
    }
    stack<node*> s;
    s.push(root);
    


    while(!s.empty()){

        node* curr = s.top();
        s.pop();
        cout<<curr->val;
        
        if(curr->right!=nullptr){
            s.push(curr->right);
        }
        if(curr->left!=nullptr){
            s.push(curr->left);
        }
        
    }
    cout<<endl;
}

void postwr(node* root) {
    if(root == nullptr)
        return;

    stack<node*> s1, s2;
    s1.push(root);

    while(!s1.empty()) {
        node* curr = s1.top();
        s1.pop();
        s2.push(curr);

        if(curr->left != nullptr)
            s1.push(curr->left);
        if(curr->right != nullptr)
            s1.push(curr->right);
    }

    while(!s2.empty()) {
        node* temp = s2.top();
        cout << temp->val;
        s2.pop();
    }

    cout << endl;
}


int main() {
    string prefix_expression = "+--a*bc/def";
    int curr = 0;
    node* root = insert(prefix_expression, curr);
    
    cout<<endl;
    prewr(root);
    return 0;
}