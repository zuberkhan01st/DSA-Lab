#include <iostream>
using namespace std;
struct node{
    int data;
    node* left;
    node* right;

};

node* create(int data){
    node* newnode = new node;
    newnode->data = data;
    newnode->left = NULL;
    newnode->right = NULL;
    return newnode;  
}



node* insert(node* root,int data){
    if(root==NULL){
        root = create(data);
        return root;

    }

    if(data < root->data){
        root->left = insert(root->left,data);
    }
    else{
        root->right = insert(root->right,data);
    }
    return root;
}
void print(node* root){
    if(root==NULL){
        return;
    }
    print(root->left);
    cout<<root->data<<" ";
    print(root->right);
}

int longest(node* root){
    if(root==NULL){
        return 0;
    }
    else{
        return 1+ max(longest(root->left),longest(root->right));
        
    }
}

int min_value(node* root){
    if(root->left == NULL){
        return root->data;
    }

    return min_value(root->left);
}

void swapping(node* root){
    if(!root){
        return;
    }
    swap(root->left,root->right);
    swapping(root->left);
    swapping(root->right);
}

bool search(node* root, int val) {
    if (!root) return false;

    if (root->data == val) return true; 

    
    if (val < root->data)  search(root->left, val);

    
    search(root->right, val);
    return false;
}



int main(){
    node* root = create(10);
    root =insert(root,2);
    root =insert(root,8);
    root =insert(root,5);
    root =insert(root,12);
    root =insert(root,20);
    print(root);
    cout<<endl;
    int no = min_value(root);
    cout<<no;
    swapping(root);
    cout<<endl;
    print(root);


    int searchValue = 20; 
    if (search(root, searchValue)) {
        cout << searchValue << " is found in the tree." << endl;
    } else {
        cout << searchValue << " is not found in the tree." << endl;
    }

    return 0;
}